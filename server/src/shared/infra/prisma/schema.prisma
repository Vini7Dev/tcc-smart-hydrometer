generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  CUSTOMER
  ADMIN
}

enum ConsumptionCategory {
  EMPTY
  COMMERCIAL_SOCIAL_ASSISTANCE
  COMMERCIAL_NORMAL
  INDUSTRIAL_NORMAL
  PUBLIC_WITH_PROGRAM_AGREEMENT
  PUBLIC_WITH_CONTRACT_PURE
  PUBLIC_NORMAL
  RESIDENTIAL_NORMAL
  RESIDENTIAL_SOCIAL
  RESIDENTIAL_VULNERABLE_NORMAL
}

model Users {
  id                  String      @id @default(uuid())
  name                String
  email               String
  password            String
  avatar_file         String?
  account_type        AccountType @default(CUSTOMER)
  created_at          DateTime    @default(now())
  updated_at          DateTime    @default(now())

  hydrometers         Hydrometers[]
  forgotPasswordToken ForgotPasswordTokens?

  @@map("users")
}

model ForgotPasswordTokens {
  id          String    @id @default(uuid())
  user_id     String    @unique
  user        Users     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at  DateTime  @default(now())

  @@map("forgotPasswordTokens")
}

model News {
  id          String        @id @default(uuid())
  title       String
  text        String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())

  news_images NewsImages[]

  @@map("news")
}

model NewsImages {
  id          String    @id @default(uuid())
  news_id     String
  image_file  String
  created_at  DateTime  @default(now())

  news        News @relation(fields: [news_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("newsImages")
}

model Hydrometers {
  id                    Int       @id @default(autoincrement())
  address_id            String?
  user_id               String?
  password              String
  name                  String
  consumption_category  ConsumptionCategory
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now())

  address               Adresses? @relation(fields: [address_id], references: [id])
  user                  Users?    @relation(fields: [user_id], references: [id])
  consumption_marking   ConsumptionMarkings[]

  @@map("hydrometers")
}

model Adresses {
  id            String    @id @default(uuid())
  postal_code   String
  street        String
  number        String?
  neighborhood  String
  city          String
  state         String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())

  hydrometers   Hydrometers[]

  @@map("adresses")
}

model ConsumptionMarkings {
  id              String      @id @default(uuid())
  hydrometer_id   Int
  consumption     Int
  monetary_value  Int
  created_at      DateTime    @default(now())

  hydrometer      Hydrometers @relation(fields: [hydrometer_id], references: [id])

  @@map("consumptionMarkings")
}

model CitiesForConversion {
  id                      String      @id @default(uuid())
  name                    String
  code                    Int
  last_update             String
  created_at              DateTime  @default(now())
  updated_at              DateTime  @default(now())

  categoriesForConversion CategoriesForConversion[]

  @@map("citiesForConversion")
}

model CategoriesForConversion {
  id                      String    @id @default(uuid())
  city_for_conversion_id  String
  category                String
  created_at              DateTime  @default(now())
  updated_at              DateTime  @default(now())

  city_for_conversion     CitiesForConversion @relation(fields: [city_for_conversion_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  consumptionConversions  ConsumptionConversions[]

  @@map("categoriesForConversion")
}

model ConsumptionConversions {
  id                          String    @id @default(uuid())
  category_for_conversion_id  String
  rule                        String
  water_rate                  Int
  sewer_rate                  Int
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @default(now())

  category_for_conversion     CategoriesForConversion @relation(fields: [category_for_conversion_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("consumptionConversions")
}
